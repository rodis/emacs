[(meta
  (format-version . "0.0.1")
  (view-data-file . "view/views.ee")
  (fields ()))
 [((type . view)
   (name . "by Directory")
   (default . t)
   (c-path-finder . (lambda (r)
    (list (ee-split-string (ee-field 'directory r) "/"))))
   (c-counter . (lambda (a-level c-level s-level header attr-alist) 0))
   (r-counter . (lambda (r a-level r-level children-p result) 1))
   (c-sorter . (lambda (a-level c-level s-level attr-alist)
    (lambda (c1 c2) (string< (car c1) (car c2)))))
   (r-sorter . (lambda (a-level r-level attr-alist)
    (lambda (ri1 ri2)
      (string< (ee-field 'file-name (aref ee-data ri1))
               (ee-field 'file-name (aref ee-data ri2))))))
   (c-printer . (lambda (a-level c-level s-level header attr-alist)
    (let ((b (point)))
      (insert (format
               (concat "%s- %s (%s)")
               (make-string (1- (+ c-level s-level)) ?\040)
               header
               (or (cadr (assq 'counter attr-alist)) "0")))
      (add-text-properties b (point) (list 'face (ee-c-face c-level))))))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (setq ee-goal-column 51)
    (insert (format "%s   %s %4d %4d %8d %16s %s"
                    (or (car (ee-field 'mark r)) " ")
                    (ee-field 'modes r)
                    (ee-field 'uid r)
                    (ee-field 'gid r)
                    (ee-field 'size r)
                    (format-time-string "%Y-%m-%d %H:%M" (ee-field 'modtime r))
                    (ee-field 'file-name r)))
    (cond ((ee-field 'mark r)
           (add-text-properties (+ (line-beginning-position) 51) (point) (list 'face 'ee-marked))
           (add-text-properties (line-beginning-position) (+ (line-beginning-position) 1) (list 'face 'ee-bookmarked)))
          ((and ee-view-filter-omit (let ((r-filter (ee-data-field-get 'r-filter ee-view view-getters)))
                                      (not (or (null r-filter)
                                               (and (functionp r-filter)
                                                    (funcall r-filter r))))))
           (add-text-properties (+ (line-beginning-position) 51) (point) (list 'face 'ee-omitted))))))
   ;; (post-generate . (lambda () (or ee-hidden-expansions (ee-view-expansion-hide-all))))
   (r-select . ee-dired-find-file))]
 [((type . view)
   (name . "Alphabetical")
   (r-sorter . (lambda (a-level r-level attr-alist)
    (lambda (ri1 ri2)
      (string< (ee-field 'file-name (aref ee-data ri1))
               (ee-field 'file-name (aref ee-data ri2))))))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (setq ee-goal-column 51)
    (insert (format "%s   %s %4d %4d %8d %16s %s"
                    (or (car (ee-field 'mark r)) " ")
                    (ee-field 'modes r)
                    (ee-field 'uid r)
                    (ee-field 'gid r)
                    (ee-field 'size r)
                    (format-time-string "%Y-%m-%d %H:%M" (ee-field 'modtime r))
                    (ee-field 'file-name r)))
    (cond ((ee-field 'mark r)
           (add-text-properties (+ (line-beginning-position) 51) (point) (list 'face 'ee-marked))
           (add-text-properties (line-beginning-position) (+ (line-beginning-position) 1) (list 'face 'ee-bookmarked)))
          ((and ee-view-filter-omit (let ((r-filter (ee-data-field-get 'r-filter ee-view view-getters)))
                                      (not (or (null r-filter)
                                               (and (functionp r-filter)
                                                    (funcall r-filter r))))))
           (add-text-properties (+ (line-beginning-position) 51) (point) (list 'face 'ee-omitted))))))
   ;; (post-generate . (lambda () (or ee-hidden-expansions (ee-view-expansion-hide-all))))
   (r-select . ee-dired-find-file))]]
