[(meta
  (format-version . "0.0.1")
  (view-data-file . "view/views.ee")
  (fields ()))
 [((type . view)
   (name . "by PID")
   (default . t)
   (r-sorter . (lambda (a-level r-level attr-alist)
    (lambda (ri1 ri2)
      (< (ee-field 'PID (aref ee-data ri1))
         (ee-field 'PID (aref ee-data ri2))))))
   (r-title-printer . (lambda () (setq header-line-format "  USER       PID %%CPU %%MEM   VSZ   RSS TTY      STAT START   TIME COMMAND")))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (insert (format "%s%-8s %5s %4s %4s %5s %5s %-8s %-4s %-6s %5s %s"
                    (or (car (ee-field 'mark r)) " ")
                    (ee-field 'USER r)
                    (ee-field 'PID r)
                    (ee-field '%CPU r)
                    (ee-field '%MEM r)
                    (ee-field 'VSZ r)
                    (ee-field 'RSS r)
                    (ee-field 'TTY r)
                    (ee-field 'STAT r)
                    (ee-field 'START r)
                    (ee-field 'TIME r)
                    (ee-field 'COMMAND r)))
    (cond ((ee-field 'mark r)
           (add-text-properties (line-beginning-position) (line-end-position) (list 'face 'ee-marked))))))
   (r-execute . ee-ps-execute))]
 [((type . view)
   (name . "by %CPU")
   (default . t)
   (r-sorter . (lambda (a-level r-level attr-alist)
    (lambda (ri1 ri2)
      (> (ee-field '%CPU (aref ee-data ri1))
         (ee-field '%CPU (aref ee-data ri2))))))
   (r-title-printer . (lambda () (setq header-line-format "  USER       PID %%CPU %%MEM   VSZ   RSS TTY      STAT START   TIME COMMAND")))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (insert (format "%s%-8s %5s %4s %4s %5s %5s %-8s %-4s %-6s %5s %s"
                    (or (car (ee-field 'mark r)) " ")
                    (ee-field 'USER r)
                    (ee-field 'PID r)
                    (ee-field '%CPU r)
                    (ee-field '%MEM r)
                    (ee-field 'VSZ r)
                    (ee-field 'RSS r)
                    (ee-field 'TTY r)
                    (ee-field 'STAT r)
                    (ee-field 'START r)
                    (ee-field 'TIME r)
                    (ee-field 'COMMAND r)))
    (cond ((ee-field 'mark r)
           (add-text-properties (line-beginning-position) (line-end-position) (list 'face 'ee-marked))))))
   (r-execute . ee-ps-execute))]
 [((type . view)
   (name . "by USER")
   (c-path-finder . (lambda (r)
    (list (if (ee-field 'USER r)
              (list (ee-field 'USER r))))))
   (c-sorter . (lambda (a-level c-level s-level attr-alist)
    (lambda (c1 c2) (string< (car c1) (car c2)))))
   (r-sorter . (lambda (a-level r-level attr-alist)
    (lambda (ri1 ri2)
      (< (ee-field 'PID (aref ee-data ri1))
         (ee-field 'PID (aref ee-data ri2))))))
   (r-calculator . (lambda (r a-level r-level children-p result) 1))
   (c-counter . (lambda (a-level c-level s-level header attr-alist) 0))
   (r-counter . (lambda (r a-level r-level children-p result) 1))
   (r-title-printer . (lambda () (setq header-line-format "  USER       PID %%CPU %%MEM   VSZ   RSS TTY      STAT START   TIME COMMAND")))
   (c-printer . (lambda (a-level c-level s-level header attr-alist)
    (let ((b (point)))
      (insert (format
               (concat "%s- %s (%s)")
               (make-string (1- (+ c-level s-level)) ?\040)
               header
               (or (cadr (assq 'counter attr-alist)) "0")))
      (add-text-properties b (point) (list 'face (ee-c-face c-level))))))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (insert (format "%s%-8s %5s %4s %4s %5s %5s %-8s %-4s %-6s %5s %s"
                    (or (car (ee-field 'mark r)) " ")
                    (ee-field 'USER r)
                    (ee-field 'PID r)
                    (ee-field '%CPU r)
                    (ee-field '%MEM r)
                    (ee-field 'VSZ r)
                    (ee-field 'RSS r)
                    (ee-field 'TTY r)
                    (ee-field 'STAT r)
                    (ee-field 'START r)
                    (ee-field 'TIME r)
                    (ee-field 'COMMAND r)))
    (cond ((ee-field 'mark r)
           (add-text-properties (line-beginning-position) (line-end-position) (list 'face 'ee-marked))))))
   (r-execute . ee-ps-execute))]]
