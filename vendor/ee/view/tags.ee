[(meta
  (format-version . "0.0.1")
  (view-data-file . "view/views.ee")
  (fields ()))
 [((type . view)
   (name . "by File Name/Sorted by Tag")
   (default . t)
   (c-path-finder . (lambda (r)
    (list (ee-field 'file r))))
   (c-counter . (lambda (a-level c-level s-level header attr-alist) 0))
   (r-counter . (lambda (r a-level r-level children-p result) 1))
   (c-sorter . (lambda (a-level c-level s-level attr-alist)
    (lambda (c1 c2) (string< (car c1) (car c2)))))
   (r-sorter . (lambda (a-level r-level attr-alist)
    (lambda (ri1 ri2)
      (string< (ee-field 'tag (aref ee-data ri1))
               (ee-field 'tag (aref ee-data ri2))))))
   (c-printer . (lambda (a-level c-level s-level header attr-alist)
    (let ((b (point)))
      (insert (format "%s- %s (%s)"
                      (make-string (1- (+ c-level s-level)) ? )
                      header
                      (or (cadr (assq 'counter attr-alist)) "0")))
      (add-text-properties b (point) (list 'face (ee-c-face c-level))))))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (insert (format "%s %s"
                    (or (car (ee-field 'mark r)) " ")
                    (ee-field 'tag r)))
    (if (ee-field 'mark r)
        (add-text-properties (line-beginning-position) (1+ (line-beginning-position)) (list 'face 'font-lock-warning-face)))
    (cond
     ((ee-field 'read r)
      (add-text-properties b (point) (list 'face 'ee-link-visited))))))
   (post-generate . (lambda () (or ee-hidden-expansions (ee-view-expansion-hide-all))))
   (r-select . ee-tags-select))]
 [((type . view)
   (name . "by File Name/Unsorted")
   (c-path-finder . (lambda (r)
    (list (ee-field 'file r))))
   (c-counter . (lambda (a-level c-level s-level header attr-alist) 0))
   (r-counter . (lambda (r a-level r-level children-p result) 1))
   (c-sorter . (lambda (a-level c-level s-level attr-alist)
    (lambda (c1 c2) (string< (car c1) (car c2)))))
   (r-sorter . (lambda (a-level r-level attr-alist)
    (lambda (ri1 ri2)
      nil)))
   (c-printer . (lambda (a-level c-level s-level header attr-alist)
    (let ((b (point)))
      (insert (format "%s- %s (%s)"
                      (make-string (1- (+ c-level s-level)) ? )
                      header
                      (or (cadr (assq 'counter attr-alist)) "0")))
      (add-text-properties b (point) (list 'face (ee-c-face c-level))))))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (insert (format "%s %s"
                    (or (car (ee-field 'mark r)) " ")
                    (ee-field 'tag r)))
    (if (ee-field 'mark r)
        (add-text-properties (line-beginning-position) (1+ (line-beginning-position)) (list 'face 'font-lock-warning-face)))
    (cond
     ((ee-field 'read r)
      (add-text-properties b (point) (list 'face 'ee-link-visited))))))
   (post-generate . (lambda () (or ee-hidden-expansions (ee-view-expansion-hide-all))))
   (r-select . ee-tags-select))]]
