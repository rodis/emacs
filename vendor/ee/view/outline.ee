[(meta
  (format-version . "0.0.1")
  (view-data-file . "view/views.ee")
  (fields ()))
 [((type . view)
   (name . "Outline Tree")
   (default . t)
   ;; (r-filter . (lambda (r) (string-match "defun" (ee-field 'heading r))))
   (c-tree-builder . ee-outline-c-tree-builder)
   (r-sorter . (lambda (a-level r-level attr-alist)
    (lambda (ri1 ri2) nil)))
   (c-counter . (lambda (a-level c-level s-level header attr-alist) 0))
   (r-counter . (lambda (r a-level r-level children-p result) 1))
   (c-printer . (lambda (a-level c-level cs-level header attr-alist)
    (insert (make-string (1- a-level) ? ) "- " header)))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (let ((b (point)))
      (insert (make-string (1- a-level) ? )
              (if children-p "- " "  ")
              ;; (format "%-44s : %s %s" (substring (ee-field 'heading r) 0 (min (length (ee-field 'heading r)) (- 44 a-level))) (ee-field 'heading b) (ee-field 'heading e))
              ;; (format "%s %s %s" a-level (and r (ee-field 'level r)) (if r (ee-field 'heading r) "(no-heading)"))
              (format "%s" (if r (ee-field 'heading r) "(no-heading)")))
      ;; use original outline properties
      ;; (if (and children-p (< a-level (length ee-r-faces)))
      ;;     (add-text-properties b (point) (list 'face (ee-r-face a-level))))
      )))
   (r-select . ee-outline-switch-to-buffer)
   (r-execute . ee-outline-execute))]
 [((type . view)
   (name . "Alphabetical")
   (description . "sorted alphabetically by header names")
   (r-sorter . (lambda (a-level r-level attr-alist)
    (lambda (ri1 ri2)
      (string< (ee-field 'heading (aref ee-data (if (consp ri1) (car ri1) ri1)))
               (ee-field 'heading (aref ee-data (if (consp ri2) (car ri2) ri2)))))))
   (c-calculator . nil)
   (r-calculator . (lambda (r a-level r-level children-p result) 1))
   (c-counter . (lambda (a-level c-level s-level header attr-alist) 0))
   (r-counter . (lambda (r a-level r-level children-p result) 1))
   (c-printer . (lambda (a-level c-level s-level header attr-alist)
    (let ((b (point)))
      (insert (format
               (concat "%s- %s (%s)")
               (make-string (1- (+ c-level s-level)) ?\040)
               header
               (or (cadr (assq 'counter attr-alist)) "0")))
      ;; use original outline properties
      ;; (add-text-properties b (point) (list 'face (ee-c-face c-level)))
      )))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (insert (format "%s%s %s"
                    (or (car (ee-field 'mark r)) " ")
                    (make-string (1- a-level) ?\040)
                    (ee-field 'heading r)))))
   (r-select . ee-outline-switch-to-buffer)
   (r-execute . ee-outline-execute))]]
