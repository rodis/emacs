[(meta
  (format-version . "0.0.1")
  (view-data-file . "view/views.ee")
  (fields ()))
 [((type . view)
   (name . "by Package Name")
   (default . t)
   (c-path-finder . (lambda (r)
    (list (list (upcase (substring (ee-field 'name r) 0 1))))))
   (c-sorter . (lambda (a-level c-level s-level attr-alist)
    (lambda (c1 c2) (string< (car c1) (car c2)))))
   (r-sorter . (lambda (a-level r-level attr-alist)
    (lambda (ri1 ri2)
      (string< (ee-field 'name (aref ee-data ri1))
               (ee-field 'name (aref ee-data ri2))))))
   (c-calculator . nil)
   (r-calculator . (lambda (r a-level r-level children-p result) 1))
   (c-counter . (lambda (a-level c-level s-level header attr-alist) 0))
   (r-counter . (lambda (r a-level r-level children-p result) 1))
   (c-printer . (lambda (a-level c-level s-level header attr-alist)
    (let ((b (point)))
      (insert (format
               (concat "%s- %s (%s)")
               (make-string (1- a-level) ?\040)
               header
               (or (cadr (assq 'counter attr-alist)) "0")))
      (add-text-properties b (point) (list 'face (ee-c-face c-level))))))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (let ((p (point)))
      (insert (format "%s %s"
                      (or (car (ee-field 'mark r)) " ")
                      (ee-field 'name r)))
      (if (ee-field 'desc r)
          (progn
            (setq p (point))
            (insert " " (ee-field 'desc r))
            (add-text-properties p (point) (list 'face 'ee-shadow))))
      (if (ee-field 'note r)
          (progn
            (setq p (point))
            (insert "\n   "
                    (make-string (length (ee-field 'name r)) ?\040)
                    (ee-field 'note r))
            (add-text-properties p (point) (list 'face 'ee-shadow)))))))
   (r-select . ee-ell-select)
   (r-execute . ee-ell-execute))]
 [((type . view)
   (name . "by Date")
   (c-path-finder . (lambda (r)
    (list (if (ee-field 'date r)
              (butlast (ee-split-string (ee-field 'date r) "-"))
            (list "(Undated)")))))
   (c-sorter . (lambda (a-level c-level s-level attr-alist)
    (lambda (c1 c2) (string< (car c2) (car c1)))))
   (r-sorter . (lambda (a-level r-level attr-alist)
    (lambda (ri1 ri2)
      (let ((d1 (ee-field 'date (aref ee-data ri1)))
            (d2 (ee-field 'date (aref ee-data ri2))))
        (if (string= d1 d2)
            (string< (ee-field 'name (aref ee-data ri1))
                     (ee-field 'name (aref ee-data ri2)))
          (string< d2 d1))))))
   (c-calculator . nil)
   (r-calculator . (lambda (r a-level r-level children-p result) 1))
   (c-counter . (lambda (a-level c-level s-level header attr-alist) 0))
   (r-counter . (lambda (r a-level r-level children-p result) 1))
   (c-printer . (lambda (a-level c-level s-level header attr-alist)
    (let ((b (point)))
      (insert (format
               (concat "%s- %s (%s)")
               (make-string (1- a-level) ?\040)
               header
               (or (cadr (assq 'counter attr-alist)) "0")))
      (add-text-properties b (point) (list 'face (ee-c-face c-level))))))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (let ((p (point)))
      (insert (format "%s %s %s"
                      (or (car (ee-field 'mark r)) " ")
                      (or (ee-field 'date r) "")
                      (ee-field 'name r)))
      (if (ee-field 'desc r)
          (progn
            (setq p (point))
            (insert " " (ee-field 'desc r))
            (add-text-properties p (point) (list 'face 'ee-shadow)))))))
   (r-select . ee-ell-select)
   (r-execute . ee-ell-execute)
   (post-generate . (lambda () (ee-view-expansion-hide-all) (ee-view-expansion-show) (next-line 1) (ee-view-expansion-show))))]
 [((type . view)
   (name . "by Author")
   (c-path-finder . (lambda (r)
    (list (if (ee-field 'auth r)
              (let ((last-name (car (last (delete "" (split-string (ee-field 'auth r) " "))))))
                (list (if (>= (length last-name) 1)
                          (upcase (substring last-name 0 1))
                        "?")
                      (ee-field 'auth r)))
            (list "Unauthored")))))
   (c-sorter . (lambda (a-level c-level s-level attr-alist)
    (lambda (c1 c2)
      (if (and (stringp (car c1)) (stringp (car c2)))
          (string< (car (last (split-string (car c1) " ")))
                   (car (last (split-string (car c2) " "))))))))
   (r-sorter . (lambda (a-level r-level attr-alist)
    (lambda (ri1 ri2)
      (string< (ee-field 'name (aref ee-data ri1))
               (ee-field 'name (aref ee-data ri2))))))
   (c-calculator . nil)
   (r-calculator . (lambda (r a-level r-level children-p result) 1))
   (c-counter . (lambda (a-level c-level s-level header attr-alist) 0))
   (r-counter . (lambda (r a-level r-level children-p result) 1))
   (c-printer . (lambda (a-level c-level s-level header attr-alist)
    (let ((b (point)))
      (insert (format
               (concat "%s- %s (%s)")
               (make-string (1- a-level) ?\040)
               header
               (or (cadr (assq 'counter attr-alist)) "0")))
      (add-text-properties b (point) (list 'face (ee-c-face c-level))))))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (let ((p (point)))
      (insert (format "%s %s"
                      (or (car (ee-field 'mark r)) " ")
                      (ee-field 'name r)))
      (if (ee-field 'desc r)
          (progn
            (setq p (point))
            (insert " " (ee-field 'desc r))
            (add-text-properties p (point) (list 'face 'ee-shadow)))))))
   (r-select . ee-ell-select)
   (r-execute . ee-ell-execute)
   (post-generate . ee-view-expansion-hide-all))]]
