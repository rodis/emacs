[(meta
  (format-version . "0.0.1")
  (view-data-file . "view/views.ee")
  (fields ()))
 [((type . view)
   (name . "Node Tree")
   (default . t)
   (r-filter . (lambda (r) (ee-field 'category r)))
   (c-path-finder . (lambda (r)
    (if (not (equal (ee-field 'category r) "Top"))
        (list (list (ee-field 'category r))))))
   (r-parent-child-key-fields nodename menulist)
   (r-calculator . (lambda (r a-level r-level children-p result)
    (- 1 result)))
   (c-counter . (lambda (a-level c-level s-level c attr-alist) 0))
   (r-counter . (lambda (r a-level r-level children-p result) 1))
   (c-title-printer . nil)
   (r-title-printer . nil)
   (c-printer . (lambda (a-level c-level cs-level c attr-alist)
    (let ((b (point)))
      (insert (format
               (concat "%s- %s (%s)")
               (make-string (1- a-level) ?\040)
               c
               (or (cadr (assq 'counter attr-alist)) "0")))
      (add-text-properties b (point) (list 'face (ee-c-face c-level))))))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (let ((b (point)))
      (insert (make-string (* 2 (1- a-level)) ? )
              (if children-p "- " ". ")
              (if children-p
                  (format "%s (%s)" (if r (ee-field 'nodename r) "(no-heading)")
                          (or (cadr (assq 'result attr-alist)) "0"))
                (format "%s" (if r (ee-field 'nodename r) "(no-heading)"))))
      ;; Different colors for different levels:
      (if nil ;; (< a-level (length ee-r-faces))
          (add-text-properties b (point) (list 'face (ee-r-face a-level))))
      (cond
       ((ee-field 'mark r)
        (add-text-properties b (point) (list 'face 'ee-marked)))
       ((ee-field 'bookmark r)
        (add-text-properties b (point) (list 'face 'ee-bookmarked)))
       ((ee-field 'read r)
        (add-text-properties b (point) (list 'face 'ee-link-visited)))
       ;; (t (add-text-properties b (point) (list 'face 'ee-link)))
       ))))
   ;; (post-generate . (lambda () (ee-view-expansion-hide-all)))
   (r-select . ee-info-find-node-other-window-display)
   (r-execute))]
 [((type . view)
   (name . "Alphabetical")
   (r-sorter . (lambda (a-level r-level attr-alist)
    (lambda (ri1 ri2)
      (string< (ee-field 'nodename (aref ee-data ri1))
               (ee-field 'nodename (aref ee-data ri2))))))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (let ((b (point)))
      (insert (format "%s" (if r (ee-field 'nodename r) "(no-heading)")))
      (cond
       ((ee-field 'mark r)
        (add-text-properties b (point) (list 'face 'ee-marked)))
       ((ee-field 'bookmark r)
        (add-text-properties b (point) (list 'face 'ee-bookmarked)))
       ((ee-field 'read r)
        (add-text-properties b (point) (list 'face 'ee-link-visited)))))))
   (r-select . ee-info-find-node-other-window-display)
   (r-execute))]]
