[(meta
  (format-version . "0.0.1")
  (view-data-file . "view/views.ee")
  (fields ()))
 [((type . view)
   (name . "by Version/by Category")
   (default . t)
   (c-path-finder .
    (lambda (r) (or (mapcar (lambda (category)
                              (append (list (ee-field 'version r))
                                      (ee-split-string category "/")))
                            (ee-field 'categories r))
                    (list (list (ee-field 'version r))))))
   (c-sorter . (lambda (a-level c-level s-level attr-alist)
    (lambda (c1 c2)
      (if (eq c-level 1)
          (string< (car c2) (car c1))
        (string< (car c1) (car c2))))))
   (r-sorter . (lambda (a-level r-level attr-alist)
    (lambda (ri1 ri2)
      (string< (ee-field 'title (aref ee-data ri1))
               (ee-field 'title (aref ee-data ri2))))))
   (c-calculator . nil)
   (r-calculator . (lambda (r a-level r-level children-p result) 1))
   (c-counter . (lambda (a-level c-level s-level header attr-alist) 0))
   (r-counter . (lambda (r a-level r-level children-p result) 1))
   (c-title-printer . nil)
   (r-title-printer . (lambda () (setq header-line-format " Version Title")))
   (c-printer . (lambda (a-level c-level s-level header attr-alist)
    (let ((b (point)))
      (insert (format
               (concat "%s- %s (%s)")
               (make-string (1- a-level) ?\040)
               header
               (or (cadr (assq 'counter attr-alist)) "0")))
      (add-text-properties b (point) (list 'face (ee-c-face c-level))))))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (let ((p (point)))
      (insert (format "%s%s%s"
                      (or (car (ee-field 'mark r)) " ")
                      (make-string (1- a-level) ?\040)
                      (ee-field 'title r)))))))]
 [((type . view)
   (name . "by Category/by Version")
   (c-path-finder .
    (lambda (r) (mapcar (lambda (category)
                          (append (ee-split-string category "/")
                                  (list (ee-field 'version r))))
                        (ee-field 'categories r))))
   (c-sorter . (lambda (a-level c-level s-level attr-alist)
    (lambda (c1 c2)
      (if (eq c-level 2)
          (string< (car c2) (car c1))
        (and (stringp (car c1))
               (stringp (car c2))
               (string< (car c1) (car c2)))))))
   (r-sorter . (lambda (a-level r-level attr-alist)
    (lambda (ri1 ri2)
      (if (eq c-level 1)
          (string< (ee-field 'title (aref ee-data ri2))
                   (ee-field 'title (aref ee-data ri1)))
        (string< (ee-field 'title (aref ee-data ri1))
                 (ee-field 'title (aref ee-data ri2)))))))
   (c-calculator . nil)
   (r-calculator . (lambda (r a-level r-level children-p result) 1))
   (c-counter . (lambda (a-level c-level s-level header attr-alist) 0))
   (r-counter . (lambda (r a-level r-level children-p result) 1))
   (c-title-printer . nil)
   (r-title-printer . (lambda () (setq header-line-format " Version Title")))
   (c-printer . (lambda (a-level c-level s-level header attr-alist)
    (let ((b (point)))
      (insert (format
               (concat "%s- %s (%s)")
               (make-string (1- a-level) ?\040)
               header
               (or (cadr (assq 'counter attr-alist)) "0")))
         (add-text-properties b (point) (list 'face (ee-c-face c-level))))))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (let ((p (point)))
      (insert (format "%s%s%s"
                      (or (car (ee-field 'mark r)) " ")
                      (make-string (1- a-level) ?\040)
                      (ee-field 'title r)))))))]]
