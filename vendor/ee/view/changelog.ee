[(meta
  (format-version . "0.0.1")
  (view-data-file . "view/views.ee")
  (fields ()))
 [((type . view)
   (name . "by Date")
   (default . t)
   (c-path-finder . (lambda (r)
    (list (ee-split-string (ee-field 'date r) "-"))))
   (c-sorter . (lambda (a-level c-level s-level attr-alist)
    (lambda (c1 c2) (string< (car c2) (car c1)))))
   (r-sorter . (lambda (a-level r-level attr-alist)
    (lambda (ri1 ri2) t)))
   (c-calculator)
   (r-calculator . (lambda (r a-level r-level children-p result) 1))
   (c-counter . (lambda (a-level c-level s-level header attr-alist) 0))
   (r-counter . (lambda (r a-level r-level children-p result) 1))
   (c-title-printer)
   (r-title-printer . (lambda () ))
   (c-printer . (lambda (a-level c-level s-level header attr-alist)
    (let ((b (point)))
      (insert (format
               (concat "%s- %s (%s)")
               (make-string (1- a-level) ?\040)
               header
               (or (cadr (assq 'counter attr-alist)) "0")))
      (add-text-properties b (point) (list 'face (ee-c-face c-level))))))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (insert (format "%s%s%s%-32s %s"
                    (or (car (ee-field 'mark r)) " ")
                    (make-string r-level ?\040)
                    (if children-p "- " "  ")
                    (ee-field 'name r)
                    (ee-field 'file r)))
    (if (ee-field 'mark r)
        (add-text-properties (line-beginning-position) (1+ (line-beginning-position)) (list 'face 'font-lock-warning-face)))))
   (post-generate . (lambda () (ee-view-expansion-hide-all)))
   (r-select . ee-textfile-changelog-select)
   (r-execute . ee-textfile-changelog-execute))]
 [((type . view)
   (name . "by Author Name/by Month") ; also "by Email Address"?
   (c-path-finder . (lambda (r)
    (list (cons (ee-field 'name r)
                (butlast (ee-split-string (ee-field 'date r) "-"))))))
   (c-sorter . (lambda (a-level c-level s-level attr-alist)
    (cond ((eq c-level 1)
           ;; Sort by amount of entries
           (lambda (c1 c2)
             (> (or (cadr (assq 'counter (assq ee-mark-attr-alist c1))) 0)
                (or (cadr (assq 'counter (assq ee-mark-attr-alist c2))) 0))))
          ((eq c-level 2)
           (lambda (c1 c2)
             (string< (car c2) (car c1)))))))
   (r-sorter . (lambda (a-level r-level attr-alist) (lambda (ri1 ri2) t)))
   (c-calculator)
   (r-calculator . (lambda (r a-level r-level children-p result) 1))
   (c-counter . (lambda (a-level c-level s-level header attr-alist) 0))
   (r-counter . (lambda (r a-level r-level children-p result) 1))
   (c-title-printer)
   (r-title-printer . (lambda () ))
   (c-printer . (lambda (a-level c-level s-level header attr-alist)
    (let ((b (point)))
      (insert (format
               (concat "%s- %s (%s)")
               (make-string (1- a-level) ?\040)
               header
               (or (cadr (assq 'counter attr-alist)) "0")))
      (add-text-properties b (point) (list 'face (ee-c-face c-level))))))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (insert (format "%s%s%s%s %s"
                    (or (car (ee-field 'mark r)) " ")
                    (make-string r-level ?\040)
                    (if children-p "- " "  ")
                    (ee-field 'date r)
                    (ee-field 'file r)))
    (if (ee-field 'mark r)
        (add-text-properties (line-beginning-position) (1+ (line-beginning-position)) (list 'face 'font-lock-warning-face)))))
   (post-generate . (lambda () (ee-view-expansion-hide-all)))
   (r-select . ee-textfile-changelog-select)
   (r-execute . ee-textfile-changelog-execute))]
 [((type . view)
   (name . "by File Name")
   (c-path-finder . (lambda (r)
    (list (ee-split-string (ee-field 'file r) "/"))))
   (c-sorter . (lambda (a-level c-level s-level attr-alist)
    (lambda (c1 c2) (string< (car c1) (car c2)))))
   (c-calculator)
   (r-calculator . (lambda (r a-level r-level children-p result) 1))
   (c-counter . (lambda (a-level c-level s-level header attr-alist) 0))
   (r-counter . (lambda (r a-level r-level children-p result) 1))
   (c-title-printer)
   (r-title-printer . (lambda () ))
   (c-printer . (lambda (a-level c-level s-level header attr-alist)
    (let ((b (point)))
      (insert (format
               (concat "%s- %s (%s)")
               (make-string (1- a-level) ?\040)
               header
               (or (cadr (assq 'counter attr-alist)) "0")))
      (add-text-properties b (point) (list 'face (ee-c-face c-level))))))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (insert (format "%s%s%s%s %s"
                    (or (car (ee-field 'mark r)) " ")
                    (make-string r-level ?\040)
                    (if children-p "- " "  ")
                    (ee-field 'date r)
                    (ee-field 'name r)))
    (if (ee-field 'mark r)
        (add-text-properties (line-beginning-position) (1+ (line-beginning-position)) (list 'face 'font-lock-warning-face)))))
   ;; (post-generate . (lambda () (ee-view-expansion-hide-all)))
   (r-select . ee-textfile-changelog-select)
   (r-execute . ee-textfile-changelog-execute))]]
