[(meta
  (format-version . "0.0.1")
  (view-data-file . "view/views.ee")
  (fields ()))
 [((type . view)
   (name . "by Category")
   (default . t)
   (r-filter . (lambda (r)
    (not (ee-field 'parent r))))
   (c-path-finder . (lambda (r)
    (list
     (append
      (ee-split-string (ee-field 'category-1 r) "/")
      (ee-split-string (ee-field 'category-2 r) "/"))
     (list (ee-field 'category-3 r))
     ;; (if (ee-field 'parent r) (list "c-4" ee-mark-record-tree 3))
     )))
   ;; (r-parent-child-key-fields name children)
   (r-child-parent-key-fields name parent)
   (c-sorter . (lambda (a-level c-level s-level attr-alist)
    (lambda (c1 c2) (string< (car c1) (car c2)))))
   (c-calculator)
   (r-calculator . (lambda (r a-level r-level children-p result)
    (- (if (vectorp r)
        (* (or (ee-field 'price r) 0) (or (ee-field 'amount r) 0))
      result) result)))
   (c-counter . (lambda (a-level c-level s-level header attr-alist) 0))
   (r-counter . (lambda (r a-level r-level children-p result) 1))
   (c-title-printer)
   (r-title-printer . (lambda () ))
   (c-printer . (lambda (a-level c-level s-level header attr-alist)
    (let ((b (point)))
      (insert (format
               (concat "%s- %s (%s, %.2f)")
               (make-string (1- a-level) ?\040)
               header
               (or (cadr (assq 'counter attr-alist)) "0")
               (or (cadr (assq 'result attr-alist)) "0")))
      (add-text-properties b (point) (list 'face (ee-c-face c-level))))))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (insert (format "%s%s%s%s %s %.2f * %s = %.2f"
                    (or (car (ee-field 'mark r)) " ")
                    (make-string r-level ?\040)
                    (if children-p "- " "  ")
                    (ee-field 'name r)
                    (make-string (- 9 r-level) ?\040)
                    (or (ee-field 'price r) 0)
                    (or (ee-field 'amount r) 0)
                    (* (or (ee-field 'price r) 0) (or (ee-field 'amount r) 0))))
    (if (ee-field 'mark r)
        (add-text-properties (line-beginning-position) (1+ (line-beginning-position)) (list 'face 'font-lock-warning-face)))))
   (r-select . ee-example-select)
   (r-execute . ee-example-execute))]
 [((type . view)
   (name . "by Name")
   (default . nil)
   (r-sorter . (lambda (a-level r-level attr-alist)
    (lambda (ri1 ri2)
      (string< (ee-field 'name (aref ee-data (if (consp ri1) (car ri1) ri1)))
               (ee-field 'name (aref ee-data (if (consp ri2) (car ri2) ri2)))))))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (insert (format "%s%s%s%s"
                    (or (car (ee-field 'mark r)) " ")
                    (make-string r-level ?\040)
                    (if children-p "- " "  ")
                    (ee-field 'name r)))
    (if (ee-field 'mark r)
        (add-text-properties (line-beginning-position) (1+ (line-beginning-position)) (list 'face 'font-lock-warning-face)))))
   (r-select . ee-example-select)
   (r-execute . ee-example-execute))]]
