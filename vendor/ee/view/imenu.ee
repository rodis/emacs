[(meta
  (format-version . "0.0.1")
  (view-data-file . "view/views.ee")
  (fields ()))
 [((type . view)
   (name . "Unsorted")
   (default . t)
   (r-filter . nil)
   (c-path-finder . (lambda (r)
    (list (if (ee-field 'category r)
              (list (ee-field 'category r))))))
   (c-sorter . (lambda (a-level c-level s-level attr-alist)
    (lambda (c1 c2) (string< (car c1) (car c2)))))
   ;; (r-sorter . (lambda (a-level r-level attr-alist) (lambda (ri1 ri2) nil)))
   (c-calculator . nil)
   (r-calculator . (lambda (r a-level r-level children-p result) 1))
   (c-counter . (lambda (a-level c-level s-level header attr-alist) 0))
   (r-counter . (lambda (r a-level r-level children-p result) 1))
   (c-title-printer . nil)
   (r-title-printer . (lambda () ))
   (c-printer . (lambda (a-level c-level s-level header attr-alist)
    (let ((b (point)))
      (insert (format
               (concat "%s- %s (%s)")
               (make-string (1- (+ c-level s-level)) ?\040)
               header
               (or (cadr (assq 'counter attr-alist)) "0")))
      (add-text-properties b (point) (list 'face (ee-c-face c-level))))))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (let ((b (point)))
      (insert (format "%s%s %s"
                      (or (car (ee-field 'mark r)) " ")
                      (make-string (1- a-level) ?\040)
                      (ee-field 'name r)))
      (cond
       ((ee-field 'read r)
        (add-text-properties b (point) (list 'face 'ee-link-visited)))))))
   (post-generate . (lambda () (or ee-hidden-expansions (ee-view-expansion-hide-all))))
   (r-select . ee-imenu-switch-to-buffer)
   (r-execute . ee-imenu-execute))]
 [((type . view)
   (name . "Alphabetical")
   (default . nil)
   (r-filter . nil)
   (c-path-finder . (lambda (r)
    (list (if (ee-field 'category r)
              (list (ee-field 'category r))
            ;; While it is possible to show no category (nil)
            ;; for root items, but it is better to assign some category
            ;; to handge root items (show/hide them, show their amount):
            ;; (list "Base Items")
            ))))
   (c-sorter . (lambda (a-level c-level s-level attr-alist)
    (lambda (c1 c2) (string< (car c1) (car c2)))))
   (r-sorter . (lambda (a-level r-level attr-alist)
    (lambda (ri1 ri2)
      (string< (ee-field 'name (aref ee-data (if (consp ri1) (car ri1) ri1)))
               (ee-field 'name (aref ee-data (if (consp ri2) (car ri2) ri2)))))))
   (c-calculator . nil)
   (r-calculator . (lambda (r a-level r-level children-p result) 1))
   (c-counter . (lambda (a-level c-level s-level header attr-alist) 0))
   (r-counter . (lambda (r a-level r-level children-p result) 1))
   (c-title-printer . nil)
   (r-title-printer . (lambda () ))
   (c-printer . (lambda (a-level c-level s-level header attr-alist)
    (let ((b (point)))
      (insert (format
               (concat "%s- %s (%s)")
               (make-string (1- (+ c-level s-level)) ?\040)
               header
               (or (cadr (assq 'counter attr-alist)) "0")))
      (add-text-properties b (point) (list 'face (ee-c-face c-level))))))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (let ((b (point)))
      (insert (format "%s%s %s"
                      (or (car (ee-field 'mark r)) " ")
                      (make-string (1- a-level) ?\040)
                      (ee-field 'name r)))
      (cond
       ((ee-field 'read r)
        (add-text-properties b (point) (list 'face 'ee-link-visited)))))))
   (post-generate . (lambda () (or ee-hidden-expansions (ee-view-expansion-hide-all))))
   (r-select . ee-imenu-switch-to-buffer)
   (r-execute . ee-imenu-execute))]
 [((type . view)
   (name . "Hierarchical")
   (default . nil)
   (r-filter . nil)
   (c-path-finder . (lambda (r)
    (list (append (and (ee-field 'category r) (list (ee-field 'category r)))
                  (let ((l (ee-split-string (ee-field 'name r) "-")))
                    (butlast l (- (length l) 5)))))))
   (c-sorter . (lambda (a-level c-level s-level attr-alist)
    (lambda (c1 c2) (string< (car c1) (car c2)))))
   (r-sorter . (lambda (a-level r-level attr-alist)
    (lambda (ri1 ri2)
      (string< (ee-field 'name (aref ee-data (if (consp ri1) (car ri1) ri1)))
               (ee-field 'name (aref ee-data (if (consp ri2) (car ri2) ri2)))))))
   (c-calculator . nil)
   (r-calculator . (lambda (r a-level r-level children-p result) 1))
   (c-counter . (lambda (a-level c-level s-level header attr-alist) 0))
   (r-counter . (lambda (r a-level r-level children-p result) 1))
   (c-title-printer . nil)
   (r-title-printer . (lambda () ))
   (c-printer . (lambda (a-level c-level s-level header attr-alist)
    (let ((b (point)))
      (insert (format
               (concat "%s- %s (%s)")
               (make-string (1- (+ c-level s-level)) ?\040)
               header
               (or (cadr (assq 'counter attr-alist)) "0")))
      (add-text-properties b (point) (list 'face (ee-c-face c-level))))))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (let ((b (point)))
      (insert (format "%s%s %s"
                      (or (car (ee-field 'mark r)) " ")
                      (make-string (1- a-level) ?\040)
                      (ee-field 'name r)))
      (cond
       ((ee-field 'read r)
        (add-text-properties b (point) (list 'face 'ee-link-visited)))))))
   (post-generate . (lambda () (ee-view-expansion-hide-all)))
   (r-select . ee-imenu-switch-to-buffer)
   (r-execute . ee-imenu-execute))]]
