[(meta
  (format-version . "0.0.1")
  (view-data-file . "view/views.ee")
  (fields ()))
 [((type . view)
   (name . "by (Sub)Category")
   (default . t)
   (c-path-finder . (lambda (r)
    ;; TODO: also create simpler category view with next:
    ;;                   (mapcar (lambda (category)
    ;;                             (ee-split-string category "/"))
    ;;                           (ee-field 'categories r))
    (let ((categories (ee-field 'categories r)))
      (cond
       ((eq (length categories) 0)
        (list (list "(Uncategorized)")))
       ((eq (length categories) 1)
        (list (ee-split-string (car categories) "/")))
       (t (mapcan (lambda (category)
                    (mapcar (lambda (category2)
                              (if (not (equal category category2))
                                  (append
                                   (ee-split-string category "/")
                                   (last (ee-split-string category2 "/")))))
                            categories))
                  categories))))))
   (c-sorter . (lambda (a-level c-level s-level attr-alist)
    (lambda (c1 c2) (string< (car c1) (car c2)))))
   ;; TODO: sort by score and then status and then alphabet
   (r-sorter . (lambda (a-level r-level attr-alist)
    (lambda (ri1 ri2)
      (let* ((r1 (aref ee-data (if (consp ri1) (car ri1) ri1)))
             (r2 (aref ee-data (if (consp ri2) (car ri2) ri2)))
             (title1 (ee-field 'title r1))
             (title2 (ee-field 'title r2)))
        (if (and (equal title1 "") (equal title2 ""))
            (string< (ee-field 'url r1) (ee-field 'url r2))
          (or (and (equal title1 "") (not (equal title2 "")))
              (and (not (equal title1 "")) (equal title2 ""))
              (string< title1 title2)))))))
   (c-calculator . nil)
   (r-calculator . (lambda (r a-level r-level children-p result) 1))
   (c-counter . (lambda (a-level c-level s-level header attr-alist) 0))
   (r-counter . (lambda (r a-level r-level children-p result) 1))
   (c-title-printer . nil)
   (r-title-printer . nil)
   (c-printer . (lambda (a-level c-level s-level header attr-alist)
    (let ((b (point)))
      (insert (format
               (concat "%s- %s (%s)")
               (make-string (1- a-level) ?\040)
               header
               (or (cadr (assq 'counter attr-alist)) "0")))
      (add-text-properties b (point) (list 'face (ee-c-face c-level))))))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (let ((p (point)))
      (insert (format "%s %s" ;; or multi-line: "%s %s\n      %s"
                      (or (car (ee-field 'mark r)) " ")
                      (or (and (not (equal (ee-field 'title r) ""))
                               (ee-field 'title r))
                          (ee-field 'url r)
                          "")
                      ;; (or (ee-field 'locations r) "")
                      ))
      ;; (add-text-properties p (point) (list 'face 'region))
      (if (ee-field 'mark r)
          (add-text-properties p (1+ p) (list 'face 'ee-default-7-face)))
      (if (ee-field 'mark r)
          (add-text-properties (+ p 2) (point) (list 'face 'ee-default-1-face)))
      (if (ee-field 'description r)
          (progn
            (setq p (point))
            (insert " " (ee-field 'description r))
            (add-text-properties p (point) (list 'face 'ee-shadow)))))))
   (r-select . ee-links-select)
   (r-execute))]
 [((type . view)
   (name . "by Domain")
   (c-path-finder . (lambda (r)
    (list (ee-links-url-to-list (ee-field 'url r)))))
   (c-sorter . (lambda (a-level c-level s-level attr-alist) (lambda (c1 c2) (string< (car c1) (car c2)))))
   (r-sorter . nil) ;;((lambda (r1 r2) t))
   (c-calculator . nil)
   (r-calculator . (lambda (r a-level r-level children-p result) 1))
   (c-counter . (lambda (a-level c-level s-level header attr-alist) 0))
   (r-counter . (lambda (r a-level r-level children-p result) 1))
   (c-title-printer . nil)
   (r-title-printer . nil)
   (c-printer . (lambda (a-level c-level s-level header attr-alist)
    (let ((b (point)))
      (insert (format
               (concat "%s- %s (%s)")
               (make-string (1- a-level) ?\040)
               header
               (or (cadr (assq 'counter attr-alist)) "0")))
      (add-text-properties b (point) (list 'face (ee-c-face c-level))))))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (let ((p (point)))
      (insert (format "%s %s %s" ;; or multi-line: "%s %s\n      %s"
                      (or (car (ee-field 'mark r)) " ")
                      (ee-field 'url r)
                      (or (ee-field 'title r) "")))
      ;; (add-text-properties p (point) (list 'face 'region))
      (if (ee-field 'mark r)
          (add-text-properties p (1+ p) (list 'face 'ee-default-7-face)))
      (if (ee-field 'mark r)
          (add-text-properties (+ p 2) (point) (list 'face 'ee-default-1-face)))
      (setq p (point))
      (insert " " (or (ee-field 'description r) ""))
      (add-text-properties p (point) (list 'face 'ee-shadow)))))
   (post-generate . (lambda () (ee-view-expansion-hide-all)))
   (r-select . ee-links-select)
   (r-execute))]
 [((type . view)
   (name . "by Contact")
   (c-path-finder . (lambda (r)
    (list (if (ee-field 'contact r)
              (let ((last-name (car (last (split-string (ee-field 'contact r) " ")))))
                (list (if (>= (length last-name) 1)
                          (upcase (substring last-name 0 1))
                        "?")
                      (ee-field 'contact r)))
            (list "No contact")))))
   (c-sorter . (lambda (a-level c-level s-level attr-alist)
    (lambda (c1 c2)
      (if (and (stringp (car c1)) (stringp (car c2)))
          (string< (car (last (split-string (car c1) " ")))
                   (car (last (split-string (car c2) " "))))))))
   (c-calculator)
   (r-calculator . (lambda (r a-level r-level children-p result) 1))
   (c-counter . (lambda (a-level c-level s-level header attr-alist) 0))
   (r-counter . (lambda (r a-level r-level children-p result) 1))
   (c-printer . (lambda (a-level c-level s-level header attr-alist)
    (let ((b (point)))
      (insert (format
               (concat "%s- %s (%s)")
               (make-string (1- a-level) ?\040)
               header
               (or (cadr (assq 'counter attr-alist)) "0")))
      (add-text-properties b (point) (list 'face (ee-c-face c-level))))))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (let ((p (point)))
      (insert (format "%s %s %s" ;; or multi-line: "%s %s\n      %s"
                      (or (car (ee-field 'mark r)) " ")
                      (ee-field 'url r)
                      (or (ee-field 'title r) "")))
      (if (ee-field 'mark r)
          (add-text-properties p (1+ p) (list 'face 'ee-default-7-face)))
      (if (ee-field 'mark r)
          (add-text-properties (+ p 2) (point) (list 'face 'ee-default-1-face))))))
   (post-generate . (lambda () (ee-view-expansion-hide-all)))
   (r-select . ee-links-select)
   (r-execute))]]
