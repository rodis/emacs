[(meta
  (format-version . "0.0.1")
  (view-data-file . "view/views.ee")
  (fields ())
  (key-fields name))
 [((type . view)
   (name . "by Recency/list-buffers")
   (description . "emulates the default display of function `list-buffers'")
   (r-filter . (lambda (r)
    (let ((buffer-name (ee-field 'buffer-name r)))
      (not (or (and (> (length buffer-name) 0) (eq (aref buffer-name 0) ?\040))
               (equal (ee-buffers-buffer-name) buffer-name))))))
   (r-title-printer . (lambda ()
    (if (boundp 'header-line-format)
        (setq header-line-format "  MR Buffer              Size Mode             File")
      (insert " MR Buffer               Size Mode             File\n"
              " -- ------               ---- ----             ----"))))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (setq ee-goal-column 4)
    (insert (format "%s%c%c %-16s %8s %-16s %s"
                    (or (car (ee-field 'mark r)) " ")
                    (if (ee-field 'modified r) ?* ?\040)
                    (if (ee-field 'read-only r) ?% ?\040)
                    (ee-field 'buffer-name r)
                    (ee-field 'size r)
                    (ee-field 'mode-name r)
                    (or (ee-field 'file-name r) (ee-field 'directory r) "")))
    ;; Next 4 lines make interlaced stripes (very nice, but useless):
    ;; (or (boundp 'ee-interlaced) (defvar ee-interlaced 0))
    ;; (add-text-properties (line-beginning-position) (line-end-position)
    ;;   (list 'face (if (eq (% ee-interlaced 2) 0) 'header-line 'mouse-face)))
    ;; (setq ee-interlaced (1+ ee-interlaced))
    ))
   (post-update . (lambda () (ee-buffers-post-update)))
   (r-select . ee-buffers-switch-to-buffer)
   (r-execute . ee-buffers-execute))]
 [((type . view)
   (name . "Dired-like/by Project/by Directory")
   (description . "emulates the output of function `dired' on buffers")
   (default . t)
   (r-filter . (lambda (r)
    (let ((buffer-name (ee-field 'buffer-name r)))
      (not (or (equal (ee-buffers-buffer-name) buffer-name)
               (member buffer-name '("*Messages*" "*Completions*" "*Quail Completions*"))
               (member (ee-field 'mode-name r) '("Internal Ange-ftp"))
               (and (string-match "^Dired" (ee-field 'mode-name r))
                    (not (member buffer-name '("*Find*")))) ; TODO: unhide cloned "*Find*<2>"
               (and (> (length buffer-name) 0) (eq (aref buffer-name 0) ?\040)))))))
   (c-path-finder . (lambda (r)
    (list (cond
           ((memq (ee-field 'major-mode r) '(dired-mode))
            (list "Dired"
                  (if (string-match "/\\([^:]+\\):" (ee-field 'directory r))
                      (match-string 1 (ee-field 'directory r))
                    (ee-field 'mode-name r))))
           ((memq (ee-field 'major-mode r)
                  '(message-mode gnus-group-mode gnus-summary-mode gnus-article-mode))
            (list "Gnus" (ee-field 'mode-name r)))
           ((string-match "^ee-" (ee-field 'mode-name r))
            (ee-split-string (ee-field 'mode-name r) "-"))
           ((if (ee-field 'file-name r)
                (let ((lst ee-buffers-directory-name-regexp-alist)
                      res)
                  (while lst
                    (if (string-match (caar lst) (ee-field 'directory r))
                        (setq res (list "(Project)" ee-mark-subcategory-tree (cdar lst) (ee-field 'directory r))
                              lst nil)
                      (setq lst (cdr lst))))
                  res)))
           ((if (ee-field 'file-name r)
                (let ((lst ee-buffers-file-name-regexp-alist)
                      res)
                  (while lst
                    (if (string-match (caar lst) (ee-field 'file-name r))
                        (setq res (list "(Project)" ee-mark-subcategory-tree (cdar lst) (ee-field 'directory r))
                              lst nil)
                      (setq lst (cdr lst))))
                  res)))
           ((ee-field 'file-name r)
            (list (ee-field 'directory r)))
           (t (list (ee-field 'mode-name r)))))))
   ;; alternatively directory tree:
   ;; (c-path-finder . (lambda (r) (list (ee-split-string (ee-field 'directory r) "/"))))
   (c-sorter . (lambda (a-level c-level s-level attr-alist)
    (lambda (c1 c2) (string< (car c1) (car c2)))))
   (r-sorter . (lambda (a-level r-level attr-alist)
    (lambda (ri1 ri2)
      ;; TODO: make function with argument 'buffer-name and use it in r-sorter
      (string< (ee-field 'buffer-name (aref ee-data (if (consp ri1) (car ri1) ri1)))
               (ee-field 'buffer-name (aref ee-data (if (consp ri2) (car ri2) ri2)))))))
   (r-calculator . (lambda (r a-level r-level children-p result) (if (ee-field 'mark r) 1 0)))
   ;; alternatively by size:
   ;; (r-calculator . (lambda (r a-level r-level children-p result) (if (ee-field 'mark r) 1 (ee-field 'size r))))
   (c-counter . (lambda (a-level c-level s-level header attr-alist) 0))
   (r-counter . (lambda (r a-level r-level children-p result) 1))
   (c-title-printer)
   (r-title-printer . (lambda () (setq header-line-format "  MR Cnt Mode                  Size Display Time    Buffer Name")))
   (c-printer . (lambda (a-level c-level s-level header attr-alist)
    (let ((b (point)) mp)
      (insert (format "%s- %s" (make-string (1- a-level) ?\040) header))
      (when (assq 'counter attr-alist)
        (insert (format " (%s" (or (cadr (assq 'counter attr-alist)) "0")))
        (when (cadr (assq 'result attr-alist))
          (setq mp (point))
          (insert (format ", %s" (or (cadr (assq 'result attr-alist)) "0"))))
        (insert ")"))
      (add-text-properties b (point) (list 'face (ee-c-face c-level)))
      (if mp
          (add-text-properties (+ mp 2) (1- (point))
                               (list 'face 'ee-marked))))))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (setq ee-goal-column 51)
    (insert (format "%s%c%c %3d %-16s %8d %16s %s"
                    (or (car (ee-field 'mark r)) " ")
                    (if (ee-field 'modified r) ?* ?\040)
                    (if (ee-field 'read-only r) ?% ?\040)
                    (or (ee-field 'display-count r) 0)
                    (let ((val (ee-field 'mode-name r))) (if (> (length val) 16) (substring val 0 16) val))
                    (ee-field 'size r)
                    ;; alternatively show buffer modification time
                    ;; (if (eq (ee-field 'modtime r) 0) "" (format-time-string "%Y-%m-%d %H:%M" (ee-field 'modtime r)))
                    (format-time-string "%Y-%m-%d %H:%M" (ee-field 'display-time r))
                    (ee-field 'buffer-name r)))
    (cond ((ee-field 'mark r)
           (add-text-properties (+ (line-beginning-position) 51) (point) (list 'face 'ee-marked))
           (add-text-properties (line-beginning-position) (+ (line-beginning-position) 1) (list 'face 'ee-bookmarked)))
          ((and ee-view-filter-omit (let ((r-filter (ee-data-field-get 'r-filter ee-view view-getters)))
                                      (not (or (null r-filter)
                                               (and (functionp r-filter)
                                                    (funcall r-filter r))))))
           (add-text-properties (+ (line-beginning-position) 51) (point) (list 'face 'ee-omitted)))
          ((and (ee-field 'display-count r)
                (or ;; (< (ee-field 'display-count r) 2)
                 (= (ee-field 'display-count r) 0)
                 (> (- (float-time (current-time))
                       (float-time (ee-field 'display-time r)))
                    ee-buffers-faded-timeout)))
           (add-text-properties (+ (line-beginning-position) 51) (point) (list 'face 'ee-shadow))))))
   (post-update . (lambda () (ee-buffers-post-update)))
   (r-select . ee-buffers-switch-to-buffer)
   (r-execute . ee-buffers-execute))]
 [((type . view)
   (name . "Dired-like/by Mode/by Type")
   (description . "categorized buffers by mode or type")
   (r-filter . (lambda (r)
    (let ((buffer-name (ee-field 'buffer-name r)))
      (not (equal (ee-buffers-buffer-name) buffer-name)))))
   (c-path-finder . (lambda (r)
    (append
     (if (or (and (ee-field 'file-name r) (string-match ".newsrc-dribble" (ee-field 'file-name r)))
             (member (ee-field 'mode-name r) '("Summary" "Group" "Article"))
             (string-match "trace of SMTP" (ee-field 'buffer-name r)))
         (list "Mail"))
     (if (or (and (ee-field 'file-name r) (string-match "\\.bbdb" (ee-field 'file-name r)))
             (member (ee-field 'mode-name r) '("bbdb")))
         (list "BBDB"))
     (if (member (ee-field 'mode-name r) '("Info" "Help" "Apropos"))
         (list "Help"))
     (if (member (ee-field 'buffer-name r) '("*Holidays*" "\\.diary"))
         (list "Calendar"))
     (if (memq (ee-field 'major-mode r) '(dired-mode))
         (list (list "Dired" (ee-field 'mode-name r))))
     (if (string-match "^ee-" (ee-field 'mode-name r))
         (list (ee-split-string (ee-field 'mode-name r) "-")))
     (if (and (> (length (ee-field 'buffer-name r)) 0) (eq (aref (ee-field 'buffer-name r) 0) ?\040))
         (list "Invisible"))
     (if (ee-field 'modified r)
         (list "Modified"))
     (if (ee-field 'read-only r)
         (list "Read-only"))
     (list (ee-field 'mode-name r)))))
   (c-sorter . (lambda (a-level c-level s-level attr-alist)
    (if (not (= c-level 2))
        (lambda (c1 c2) (string< (car c1) (car c2)))
      (lambda (c1 c2) t))))
   (r-sorter . (lambda (a-level r-level attr-alist)
    (lambda (ri1 ri2)
      (string< (ee-field 'buffer-name (aref ee-data (if (consp ri1) (car ri1) ri1)))
               (ee-field 'buffer-name (aref ee-data (if (consp ri2) (car ri2) ri2)))))))
   (r-calculator . (lambda (r a-level r-level children-p result) (if (ee-field 'mark r) 1 0)))
   (c-counter . (lambda (a-level c-level s-level header attr-alist) 0))
   (r-counter . (lambda (r a-level r-level children-p result) 1))
   (c-title-printer)
   (r-title-printer . (lambda () (setq header-line-format "  MR Cnt Mode                  Size Display Time    Buffer Name")))
   (c-printer . (lambda (a-level c-level s-level header attr-alist)
    (let ((b (point)) mp)
      (insert (format "%s- %s" (make-string (1- (+ c-level s-level)) ?\040) header))
      (when (assq 'counter attr-alist)
        (insert (format " (%s" (or (cadr (assq 'counter attr-alist)) "0")))
        (when (cadr (assq 'result attr-alist))
          (setq mp (point))
          (insert (format ", %s" (or (cadr (assq 'result attr-alist)) "0"))))
        (insert ")"))
      (add-text-properties b (point) (list 'face (ee-c-face c-level)))
      (if mp
          (add-text-properties (+ mp 2) (1- (point))
                               (list 'face 'ee-marked))))))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (setq ee-goal-column 51)
    (insert (format "%s%c%c %3d %-16s %8d %16s %s"
                    (or (car (ee-field 'mark r)) " ")
                    (if (ee-field 'modified r) ?* ?\040)
                    (if (ee-field 'read-only r) ?% ?\040)
                    (or (ee-field 'display-count r) 0)
                    (let ((val (ee-field 'mode-name r))) (if (> (length val) 16) (substring val 0 16) val))
                    (ee-field 'size r)
                    (format-time-string "%Y-%m-%d %H:%M" (ee-field 'display-time r))
                    (ee-field 'buffer-name r)))
    (cond ((ee-field 'mark r)
           (add-text-properties (+ (line-beginning-position) 51) (point) (list 'face 'ee-marked))
           (add-text-properties (line-beginning-position) (+ (line-beginning-position) 1) (list 'face 'ee-bookmarked)))
          ((and ee-view-filter-omit (let ((r-filter (ee-data-field-get 'r-filter ee-view view-getters)))
                                      (not (or (null r-filter)
                                               (and (functionp r-filter)
                                                    (funcall r-filter r))))))
           (add-text-properties (+ (line-beginning-position) 51) (point) (list 'face 'ee-omitted)))
          ((or (> (- (float-time (current-time))
                     (float-time (ee-field 'display-time r)))
                  ee-buffers-faded-timeout))
           (add-text-properties (+ (line-beginning-position) 51) (point) (list 'face 'ee-shadow))))))
   (post-update . (lambda () (ee-buffers-post-update)))
   (r-select . ee-buffers-switch-to-buffer)
   (r-execute . ee-buffers-execute))]
 [((type . view)
   (name . "by Coding/Files")
   (description . "buffers are categorized by buffer file coding system")
   (r-filter . (lambda (r)
    (ee-field 'file-name r)))
   (c-path-finder . (lambda (r)
    (list (ee-field 'file-coding-system r))))
   (c-sorter . (lambda (a-level c-level s-level attr-alist)
    (lambda (c1 c2) (string< (car c1) (car c2)))))
   (r-sorter . (lambda (a-level r-level attr-alist)
    (lambda (ri1 ri2)
      (string< (ee-field 'file-name (aref ee-data (if (consp ri1) (car ri1) ri1)))
               (ee-field 'file-name (aref ee-data (if (consp ri2) (car ri2) ri2)))))))
   (r-calculator . (lambda (r a-level r-level children-p result) (if (ee-field 'mark r) 1 0)))
   (c-counter . (lambda (a-level c-level s-level header attr-alist) 0))
   (r-counter . (lambda (r a-level r-level children-p result) 1))
   (c-printer . (lambda (a-level c-level s-level header attr-alist)
    (let ((b (point)) mp)
      (insert (format "%s- %s" (make-string (1- (+ c-level s-level)) ?\040) header))
      (when (assq 'counter attr-alist)
        (insert (format " (%s" (or (cadr (assq 'counter attr-alist)) "0")))
        (when (cadr (assq 'result attr-alist))
          (setq mp (point))
          (insert (format ", %s" (or (cadr (assq 'result attr-alist)) "0"))))
        (insert ")"))
      (add-text-properties b (point) (list 'face (ee-c-face c-level)))
      (if mp
          (add-text-properties (+ mp 2) (1- (point))
                               (list 'face 'ee-marked))))))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (setq ee-goal-column 51)
    (insert (format "%s %s"
                    (or (car (ee-field 'mark r)) " ")
                    (ee-field 'file-name r)))
    (cond ((ee-field 'mark r)
           (add-text-properties (line-beginning-position) (+ (line-beginning-position) 1) (list 'face 'ee-bookmarked))))))
   (post-update . (lambda () (ee-buffers-post-update)))
   (r-select . ee-buffers-switch-to-buffer)
   (r-execute . ee-buffers-execute))]]
