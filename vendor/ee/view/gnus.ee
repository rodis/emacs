[(meta
  (format-version . "0.0.1")
  (view-data-file . "view/views.ee")
  (fields ()))
 [((type . view)
   (name . "by Category")
   (default . t)
   (c-path-finder . (lambda (r)
    (list (ee-split-string (ee-field 'category r) "/"))))
   (c-counter . (lambda (a-level c-level s-level header attr-alist) 0))
   (r-counter . (lambda (r a-level r-level children-p result) 1))
   (r-calculator . (lambda (r a-level r-level children-p result) (- 1 result)))
   (c-sorter . (lambda (a-level c-level s-level attr-alist)
    (lambda (c1 c2) t)))
   ;;       (c-sorter . (lambda (a-level c-level s-level attr-alist)
   ;;        (lambda (c1 c2) (string< (car c1) (car c2)))))
   ;;       (r-sorter . (lambda (a-level r-level attr-alist)
   ;;        (lambda (ri1 ri2)
   ;;          (string< (ee-field 'name (aref ee-data ri1))
   ;;                   (ee-field 'name (aref ee-data ri2))))))
   (c-printer . (lambda (a-level c-level s-level header attr-alist)
    (let ((b (point)))
      (insert (format
               (concat "%s- %s (%s)")
               (make-string (1- (+ c-level s-level)) ?\040)
               header
               (or (cadr (assq 'counter attr-alist)) "0")))
      (add-text-properties b (point) (list 'face (ee-c-face c-level))))))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (insert (format "%s %s: %s"
                    (or (car (ee-field 'mark r)) " ")
                    (ee-field 'unread r)
                    (ee-field 'name r)))
    (cond ((ee-field 'mark r)
           (add-text-properties (line-beginning-position) (+ (line-beginning-position) 1) (list 'face 'ee-marked))))))
   (r-select)
   (r-execute . ee-gnus-execute))]
 [((type . view)
   (name . "by Name")
   (default . t)
   (r-sorter . (lambda (a-level r-level attr-alist)
    (lambda (ri1 ri2)
      (string< (ee-field 'name (aref ee-data ri1))
               (ee-field 'name (aref ee-data ri2))))))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (insert (format "%s %s: %s"
                    (or (car (ee-field 'mark r)) " ")
                    (ee-field 'unread r)
                    (ee-field 'name r)))
    (cond ((ee-field 'mark r)
           (add-text-properties (line-beginning-position) (+ (line-beginning-position) 1) (list 'face 'ee-marked))))))
   (r-select)
   (r-execute . ee-gnus-execute))]
 [((type . view)
   (name . "by Number of Unread Articles")
   (default . t)
   (r-sorter . (lambda (a-level r-level attr-alist)
    (lambda (ri1 ri2)
      (string< (ee-field 'unread (aref ee-data ri1))
               (ee-field 'unread (aref ee-data ri2))))))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (insert (format "%s %s: %s"
                    (or (car (ee-field 'mark r)) " ")
                    (ee-field 'unread r)
                    (ee-field 'name r)))
    (cond ((ee-field 'mark r)
           (add-text-properties (line-beginning-position) (+ (line-beginning-position) 1) (list 'face 'ee-marked))))))
   (r-select)
   (r-execute . ee-gnus-execute))]]
