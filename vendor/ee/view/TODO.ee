[(meta
  (format-version . "0.0.1")
  (view-data-file . "view/views.ee")
  (fields ()))
 [((type . view)
   (name . "by Priority/by Category")
   (default . t)
   (c-path-finder .
    (lambda (r) (mapcar (lambda (category)
                          (append (list (ee-field 'priority r))
                                  (ee-split-string category "/")))
                        (ee-field 'categories r))))
   (c-sorter . (lambda (a-level c-level s-level attr-alist)
    (lambda (c1 c2)
      (cond ((and (numberp (car c1)) (numberp (car c2)))
             (< (car c1) (car c2)))
            ((not (or (numberp (car c1)) (numberp (car c2))))
             (string< (car c1) (car c2)))
            ((numberp (car c2)))))))
   (r-sorter . (lambda (a-level r-level attr-alist)
    (lambda (ri1 ri2)
      (string< (ee-field 'title (aref ee-data ri1))
               (ee-field 'title (aref ee-data ri2))))))
   (c-calculator . nil)
   (r-calculator . (lambda (r a-level r-level children-p result) 1))
   (c-counter . (lambda (a-level c-level s-level header attr-alist) 0))
   (r-counter . (lambda (r a-level r-level children-p result) 1))
   (c-title-printer . nil)
   (r-title-printer . (lambda () (setq header-line-format " Priority Title")))
   (c-printer . (lambda (a-level c-level s-level header attr-alist)
    (let ((b (point)))
      (insert (format
               (concat "%s- %s (%s)")
               (make-string (1- a-level) ?\040)
               (if (numberp header)
                   (or (nth header '("" "high" "medium" "low")) (concat "low "(int-to-string header)))
                 header)
               (or (cadr (assq 'counter attr-alist)) "0")))
      (add-text-properties
       b (point)
       (list 'face (if (numberp header)
                       (or (nth header '(nil
                                         ee-marked
                                         ee-bookmarked))
                           'ee-shadow)
                     'ee-category))))))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (let ((p (point)))
      (insert (format "%s%s %s"
                      (or (car (ee-field 'mark r)) " ")
                      (ee-field 'priority r)
                      (ee-field 'title r)))
      (add-text-properties (+ (line-beginning-position) 1) (+ (line-beginning-position) 2)
                           (list 'face (or (nth (ee-field 'priority r)
                                                '(nil
                                                  ee-marked
                                                  ee-bookmarked))
                                           'ee-shadow)))
      (if (ee-field 'comments r)
          (progn
            (setq p (point))
            (insert "\n   " (ee-field 'comments r))
            (add-text-properties p (point) (list 'face 'ee-shadow))))))))]
 [((type . view)
   (name . "by Category/by Priority")
   (c-path-finder .
    (lambda (r) (mapcar (lambda (category)
                          (append (ee-split-string category "/")
                                  (list (ee-field 'priority r))))
                        (ee-field 'categories r))))
   (c-sorter . (lambda (a-level c-level s-level attr-alist)
    (lambda (c1 c2)
      (cond ((and (numberp (car c1)) (numberp (car c2)))
             (< (car c1) (car c2)))
            ((not (or (numberp (car c1)) (numberp (car c2))))
             (string< (car c1) (car c2)))
            ((numberp (car c2)))))))
   (r-sorter . (lambda (a-level r-level attr-alist)
    (lambda (ri1 ri2)
      (string< (ee-field 'title (aref ee-data ri1))
               (ee-field 'title (aref ee-data ri2))))))
   (c-calculator . nil)
   (r-calculator . (lambda (r a-level r-level children-p result) 1))
   (c-counter . (lambda (a-level c-level s-level header attr-alist) 0))
   (r-counter . (lambda (r a-level r-level children-p result) 1))
   (c-title-printer . nil)
   (r-title-printer . (lambda () (setq header-line-format " Priority Title")))
   (c-printer . (lambda (a-level c-level s-level header attr-alist)
    (let ((b (point)))
      (insert (format
               (concat "%s- %s (%s)")
               (make-string (1- a-level) ?\040)
               (if (numberp header)
                   (or (nth header '("" "high" "medium" "low")) (concat "low "(int-to-string header)))
                 header)
               (or (cadr (assq 'counter attr-alist)) "0")))
      (add-text-properties
       b (point)
       (list 'face (if (numberp header)
                       (or (nth header '(nil
                                         ee-marked
                                         ee-bookmarked))
                           'ee-shadow)
                     (ee-c-face c-level)))))))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (let ((p (point)))
      (insert (format "%s%s %s"
                      (or (car (ee-field 'mark r)) " ")
                      (ee-field 'priority r)
                      (ee-field 'title r)))
      (add-text-properties (+ (line-beginning-position) 1) (+ (line-beginning-position) 2)
                           (list 'face (or (nth (ee-field 'priority r)
                                                '(nil
                                                  ee-marked
                                                  ee-bookmarked))
                                           'ee-shadow)))))))]
 [((type . view)
   (name . "by Due Date")
   (c-path-finder .
    (lambda (r) (list (if (ee-field 'due-date r)
                          ;; TODO: make separate function from next code:
                          (let ((date (ee-split-string (ee-field 'due-date r) "-")))
                            (list (nth 0 date)
                                  (nth 1 date)
                                  (aref '["Jan" "Feb" "Mar" "Apr" "May" "Jun" "Jul" "Aug" "Sep" "Oct" "Nov" "Dec"]
                                        (string-to-number (nth 2 date)))
                                  (nth 3 date)
                                  (nth 4 date)))
                        (list "(Unassigned date)")))))
   (c-sorter . (lambda (a-level c-level s-level attr-alist)
    (lambda (c1 c2)
      (cond ((and (numberp (car c1)) (numberp (car c2)))
             (< (car c1) (car c2)))
            ((not (or (numberp (car c1)) (numberp (car c2))))
             (string< (car c1) (car c2)))
            ((numberp (car c2)))))))
   (r-sorter . (lambda (a-level r-level attr-alist)
    (lambda (ri1 ri2)
      (string< (ee-field 'title (aref ee-data ri1))
               (ee-field 'title (aref ee-data ri2))))))
   (c-calculator . nil)
   (r-calculator . (lambda (r a-level r-level children-p result) 1))
   (c-counter . (lambda (a-level c-level s-level header attr-alist) 0))
   (r-counter . (lambda (r a-level r-level children-p result) 1))
   (c-title-printer . nil)
   (r-title-printer . (lambda () (setq header-line-format " Priority Title")))
   (c-printer . (lambda (a-level c-level s-level header attr-alist)
    (let ((b (point)))
      (insert (format
               (concat "%s- %s (%s)")
               (make-string (1- a-level) ?\040)
               (if (numberp header)
                   (or (nth header '("" "high" "medium" "low")) (concat "low "(int-to-string header)))
                 header)
               (or (cadr (assq 'counter attr-alist)) "0")))
      (add-text-properties
       b (point)
       (list 'face (if (numberp header)
                       (or (nth header '(nil
                                         ee-marked
                                         ee-bookmarked))
                           'ee-shadow)
                     'ee-category))))))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (let ((p (point)))
      (insert (format "%s%s %s"
                      (or (car (ee-field 'mark r)) " ")
                      (ee-field 'priority r)
                      (ee-field 'title r)))
      (add-text-properties (+ (line-beginning-position) 1) (+ (line-beginning-position) 2)
                           (list 'face (or (nth (ee-field 'priority r)
                                                '(nil
                                                  ee-marked
                                                  ee-bookmarked))
                                           'ee-shadow)))))))]]
