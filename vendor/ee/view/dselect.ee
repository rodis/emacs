[(meta
  (format-version . "0.0.1")
  (view-data-file . "view/views.ee")
  (fields ()))
 [((type . view)
   (name . "by Section/by Priority")
   (default . t)
   (r-filter . (lambda (r)
    (member (ee-field 'architecture r) '("all" "i386"))))
   (c-path-finder . (lambda (r)
    (list (append (ee-split-string (ee-field 'section r) "/")
                  (list (ee-field 'priority r))))))
   (c-counter . (lambda (a-level c-level s-level header attr-alist) 0))
   (r-counter . (lambda (r a-level r-level children-p result) 1))
   (c-sorter . (lambda (a-level c-level s-level attr-alist)
    (cond ((eq c-level 1)
           (lambda (c1 c2)
             (string< (car c1) (car c2))))
          ((eq c-level 2)
           (lambda (c1 c2)
             (> (length (member (car c1) '("required" "important" "standard" "optional" "extra")))
                (length (member (car c2) '("required" "important" "standard" "optional" "extra")))))))))
   (r-sorter . (lambda (a-level r-level attr-alist)
    (lambda (ri1 ri2)
      (string< (ee-field 'package (aref ee-data ri1))
               (ee-field 'package (aref ee-data ri2))))))
   (c-printer . (lambda (a-level c-level s-level header attr-alist)
    (let ((b (point)))
      (insert (format
               (concat "%s- %s (%s)")
               (make-string (1- (+ c-level s-level)) ?\040)
               header
               (or (cadr (assq 'counter attr-alist)) "0")))
      (add-text-properties b (point) (list 'face (ee-c-face c-level))))))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (let ((b (point)))
      (insert (format "%s%s %s"
                      (or (car (ee-field 'mark r)) " ")
                      (make-string (1- a-level) ?\040)
                      (ee-field 'package r)))
      (cond
       ((ee-field 'read r)
        (add-text-properties b (point) (list 'face 'ee-link-visited)))))))
   (post-generate . (lambda () (ee-view-expansion-hide-all)))
   (r-select . ee-dselect-display-info-with-narrow))]
 [((type . view)
   (name . "by Priority/by Section")
   (r-filter . (lambda (r)
    (member (ee-field 'architecture r) '("all" "i386"))))
   (c-path-finder . (lambda (r)
    (list (append (list (ee-field 'priority r))
                  (ee-split-string (ee-field 'section r) "/")))))
   (c-counter . (lambda (a-level c-level s-level header attr-alist) 0))
   (r-counter . (lambda (r a-level r-level children-p result) 1))
   (c-sorter . (lambda (a-level c-level s-level attr-alist)
    (cond ((eq c-level 1)
           (lambda (c1 c2)
             (> (length (member (car c1) '("required" "important" "standard" "optional" "extra")))
                (length (member (car c2) '("required" "important" "standard" "optional" "extra"))))))
          ((eq c-level 2)
           (lambda (c1 c2)
             (string< (car c1) (car c2)))))))
   (r-sorter . (lambda (a-level r-level attr-alist)
    (lambda (ri1 ri2)
      (string< (ee-field 'package (aref ee-data ri1))
               (ee-field 'package (aref ee-data ri2))))))
   (c-printer . (lambda (a-level c-level s-level header attr-alist)
    (let ((b (point)))
      (insert (format
               (concat "%s- %s (%s)")
               (make-string (1- (+ c-level s-level)) ?\040)
               header
               (or (cadr (assq 'counter attr-alist)) "0")))
      (add-text-properties b (point) (list 'face (ee-c-face c-level))))))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (let ((b (point)))
      (insert (format "%s%s %s"
                      (or (car (ee-field 'mark r)) " ")
                      (make-string (1- a-level) ?\040)
                      (ee-field 'package r)))
      (cond
       ((ee-field 'read r)
        (add-text-properties b (point) (list 'face 'ee-link-visited)))))))
   (post-generate . (lambda () (ee-view-expansion-hide-all)))
   (r-select . ee-dselect-display-info-with-narrow))]
 [((type . view)
   (name . "by Name")
   (r-filter . (lambda (r)
    (member (ee-field 'architecture r) '("all" "i386"))))
   (r-sorter . (lambda (a-level r-level attr-alist)
    (lambda (ri1 ri2)
      (string< (ee-field 'package (aref ee-data ri1))
               (ee-field 'package (aref ee-data ri2))))))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (let ((b (point)))
      (insert (format "%s%s %s"
                      (or (car (ee-field 'mark r)) " ")
                      (make-string (1- a-level) ?\040)
                      (ee-field 'package r)))
      (cond
       ((ee-field 'read r)
        (add-text-properties b (point) (list 'face 'ee-link-visited)))))))
   (post-generate . (lambda () (ee-view-expansion-hide-all)))
   (r-select . ee-dselect-display-info-with-narrow))]
 [((type . view)
   (name . "by Size/by Installed Size")
   (r-filter . (lambda (r)
    (member (ee-field 'architecture r) '("all" "i386"))))
   (r-sorter . (lambda (a-level r-level attr-alist)
    (lambda (ri1 ri2)
      (< (ee-field 'installed-size (aref ee-data ri2))
         (ee-field 'installed-size (aref ee-data ri1))))))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (let ((b (point)))
      (insert (format "%s%s %9s %s"
                      (or (car (ee-field 'mark r)) " ")
                      (make-string (1- a-level) ?\040)
                      (ee-field 'installed-size r)
                      (ee-field 'package r)))
      (cond
       ((ee-field 'read r)
        (add-text-properties b (point) (list 'face 'ee-link-visited)))))))
   (r-select . ee-dselect-display-info-with-narrow))]
 [((type . view)
   (name . "by Type/Emacs-related packages")
   (r-filter . (lambda (r) (or (string-match "emacs" (ee-field 'package r))
                            ;; next gets ca 5000MI (megainstructions) (e.g. 20sec on 233MHz or 5sec on 1GHz)
                            (ee-dselect-search-string-in-description r "emacs") ; slow
                            ;; (string-match "emacs" (ee-dselect-get-description-as-string r)) ; slow
                            )))
   (c-path-finder . (lambda (r)
    (list (ee-split-string (ee-field 'section r) "/"))))
   (c-counter . (lambda (a-level c-level s-level header attr-alist) 0))
   (r-counter . (lambda (r a-level r-level children-p result) 1))
   (c-sorter . (lambda (a-level c-level s-level attr-alist)
    (lambda (c1 c2)
      (string< (car c1) (car c2)))))
   (r-sorter . (lambda (a-level r-level attr-alist)
    (lambda (ri1 ri2)
      (string< (ee-field 'package (aref ee-data ri1))
               (ee-field 'package (aref ee-data ri2))))))
   (c-printer . (lambda (a-level c-level s-level header attr-alist)
    (let ((b (point)))
      (insert (format
               (concat "%s- %s (%s)")
               (make-string (1- (+ c-level s-level)) ?\040)
               header
               (or (cadr (assq 'counter attr-alist)) "0")))
      (add-text-properties b (point) (list 'face (ee-c-face c-level))))))
   (r-printer . (lambda (r a-level r-level children-p attr-alist)
    (let ((b (point)))
      (insert (format "%s%s %s"
                      (or (car (ee-field 'mark r)) " ")
                      (make-string (1- a-level) ?\040)
                      (ee-field 'package r)))
      (cond
       ((ee-field 'read r)
        (add-text-properties b (point) (list 'face 'ee-link-visited))))
      (setq b (point))
      (insert (let ((doc (or (ee-dselect-get-description-as-string r) "")))
                (substring doc 0 (string-match "\n" doc))))
      (add-text-properties b (point) (list 'face 'ee-shadow)))))
   (r-select . ee-dselect-display-info-with-narrow))]]
