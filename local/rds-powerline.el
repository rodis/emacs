(require 'powerline)

(defun gcs-propertized-evil-mode-tag ()
(let ((num (if (wg-current-workgroup t) (wg-workgroup-name (wg-current-workgroup)) "###")))
    (cond ((not (powerline-selected-window-active)) face1)
  	  	  ((equal num "###") '(:background "yellow" :foreground "black"))
		  ((equal num "one") '(:background "red" :foreground "white"))
          ((equal num "two") '(:background "green3" :foreground "white"))
          ((equal num "three") '(:background "purple" :foreground "black"))
          ((equal num "four")  '(:background "orange" :foreground "black"))
          ((equal num "five") '(:background "gray" :foreground "black"))
          (t face1))))

(defpowerline powerline-window-number 
  (let ((num (if (wg-current-workgroup t) (wg-workgroup-name (wg-current-workgroup)) "###")))
	(cond ((not (powerline-selected-window-active)) "  ")
		  ((equal num "###")  "⚉ ")
		  ((equal num "one")  "➊ ")
          ((equal num "two")  "➋ ")
          ((equal num "three")  "➌ ")
          ((equal num "four")  "➍ ")
          ((equal num "five")  "➎ ")
          ((equal num "six")  "❻ ")
          ((equal num "seven")  "➐ ")
          ((equal num "8")  "➑")
          ((equal num "9")  "➒")
          ((equal num "0")  "➓")
          (t "⚉ "))))

(defun powerline-my-theme ()
  "Setup the default mode-line."
  (interactive)
  (setq-default mode-line-format
                '("%e"
                  (:eval
                   (let* ((active (powerline-selected-window-active))
                          (mode-line (if active 'mode-line 'mode-line-inactive))
                          (face1 (if active 'powerline-active1 'powerline-inactive1))
                          (face2 (if active 'powerline-active2 'powerline-inactive2))
                          (separator-left (intern (format "powerline-%s-%s"
                                                          powerline-default-separator
                                                          (car powerline-default-separator-dir))))
                          (separator-right (intern (format "powerline-%s-%s"
                                                           powerline-default-separator
                                                           (cdr powerline-default-separator-dir))))
                          (lhs (list (powerline-window-number (gcs-propertized-evil-mode-tag) 'l)
							  		 (powerline-raw "%*" nil 'l)
                                     (powerline-buffer-size nil 'l)
                                     (powerline-raw mode-line-mule-info nil 'l)
                                     (powerline-buffer-id nil 'l)
                                     (when (and (boundp 'which-func-mode) which-func-mode)
                                       (powerline-raw which-func-format nil 'l))
                                     (powerline-raw " ")
                                     (funcall separator-left mode-line face1)
                                     (when (boundp 'erc-modified-channels-object)
                                       (powerline-raw erc-modified-channels-object face1 'l))
                                     (powerline-major-mode face1 'l)
                                     (powerline-process face1)
                                     (powerline-minor-modes face1 'l)
                                     (powerline-narrow face1 'l)
                                     (powerline-raw " " face1)
                                     (funcall separator-left face1 face2)
                                     (powerline-vc face2 'r)))
                          (rhs (list (powerline-raw global-mode-string face2 'r)
                                     (funcall separator-right face2 face1)
                                     (powerline-raw "%4l" face1 'l)
                                     (powerline-raw ":" face1 'l)
                                     (powerline-raw "%3c" face1 'r)
                                     (funcall separator-right face1 mode-line)
                                     (powerline-raw " ")
                                     (powerline-raw "%6p" nil 'r)
                                     (powerline-hud face2 face1))))
                     (concat (powerline-render lhs)
                             (powerline-fill face2 (powerline-width rhs))
                             (powerline-render rhs)))))))

(powerline-my-theme)


(provide 'rds-powerline)